类加载机制
classLoader、类加载过程、双亲委派（破坏双亲委派）、模块化（jboss modules、osgi、jigsaw）
参考链接:http://www.importnew.com/25295.html
1.classLoader 参考链接:https://www.cnblogs.com/doit8791/p/5820037.html
  (1)类装载器就是寻找类或接口字节码文件进行解析并构造JVM内部对象表示的组件.
  (2)在java中类装载器把一个类装入JVM，经过以下步骤:
     <1>装载:查找和导入Class文件。
     <2>链接:
        i:检查:检查载入的class文件的数据正确性.
       ii:准备:给类的静态变量分配存储空间.
      iii:解析:将符号引用转成直接引用.
     <3>初始化:对静态变量,静态代码块执行初始化工作.
  (3)类装载工作由ClassLoader和其子类负责。JVM在运行时会产生三个ClassLoader：根装载器，ExtClassLoader(扩展类装载器)
     和AppClassLoader，其中根装载器不是ClassLoader的子类，由C++编写，因此在java中看不到他，负责装载JRE的核心类库，
     如JRE目录下的rt.jar,charsets.jar等。ExtClassLoader是ClassLoader的子类，负责装载JRE扩展目录ext下的jar类包；
     AppClassLoader负责装载classpath路径下的类包，这三个类装载器存在父子层级关系****，即根装载器是ExtClassLoader的
     父装载器，ExtClassLoader是AppClassLoader的父装载器。默认情况下使用AppClassLoader装载应用程序的类。
  (4)全盘负责，双亲委托机制。
     全盘负责:当一个ClassLoader装载一个类时,除非显示使用另外一个ClassLoader,该类所依赖及引用的类也由这个ClassLoader
     载入。
     委托机制:先委托父类装载器寻找目标类，只有在找不到的情况下才从自己的类路径中查找并装载目标类。这一点是从安全方面考虑的,试想
     如果一个人写了一个恶意的基础类(java.lang.String)并加载到jvm会引起严重的后果。但有了全盘负责机制,java.lang.String永远
     是从根加载器加载,避免恶意情况的发生。除了JVM默认的三个ClassLoader以外，第三方可以编写自己的类装载器，以实现一些特殊的需求。
  (5)类文件被装载解析后，在jvm中都有一个对应的java.lang.class对象，提供类结构信息的描述。
  (6)数组，枚举及基本数据类型，甚至void都拥有对应的Class对象。Class类没有public的构造方法，Class对象是在装载类时由JVM通过调用
     类装载器中的defineClass()方法自动构造的。
  (7)为什么要使用双亲委托模式
     <1>因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次。
     <2>考虑到安全因素，我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义类型，
        这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时被加载，所以用户自定义类是无法加载
        一个自定义的ClassLoader。
     <3>思考：假如我们自己写了一个java.lang.String的类，我们是否可以替换调JDK本身的类？
        答案是否定的。我们不能实现。为什么呢？我看很多网上解释是说双亲委托机制解决这个问题，其实不是非常的准确。因为双亲委托机制是可以打破的，
        你完全可以自己写一个classLoader来加载自己写的java.lang.String类，但是你会发现也不会加载成功，具体就是因为针对java.*开头的类，
        jvm的实现中已经保证了必须由bootstrap来加载。
2.如何定义自己的classLoader
  (1)为什么需要自己定义?
     因为Java中提供的默认ClassLoader，只加载指定目录下的jar和class，如果我们想加载其它位置的类或jar时，比如：我要加载网络上的一个class文件，
     通过动态加载到内存之后，要调用这个类中的方法实现我的业务逻辑。在这样的情况下，默认的ClassLoader就不能满足我们的需求了，所以需要定义自己的ClassLoader。
  (2)流程
     <1>继承java.lang.ClassLoader
     <2>重写父类的findClass()方法
  (3)JDK已经在loadClass方法中帮我们实现了ClassLoader搜索类的算法，当在loadClass方法中搜索不到类时，loadClass方法就会调用findClass方法来搜索类，所以我们
     只需重写该方法即可。如没有特殊的要求，一般不建议重写loadClass搜索类的算法。
3.线程上下文类加载器
  (1)如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是系统上下文类加载器。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。
     线程上下文类加载器在很多 SPI 的实现中都会用到。
4.类加载器与web容器
  (1)对于运行在 Java EE容器中的 Web 应用来说，类加载器的实现方式与一般的 Java 应用有所不同。不同的 Web 容器的实现方式也会有所不同。以 Apache Tomcat 来说，每个
     Web 应用都有一个对应的类加载器实例。该类加载器也使用代理模式，(所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器)。这与一般类加载器的顺序是相反的。
     这是 Java Servlet 规范中的推荐做法，(其目的是使得 Web 应用自己的类的优先级高于 Web 容器提供的类)。这种代理模式的一个例外是：Java 核心库的类是不在查找范围之内的。
     这也是为了保证 Java 核心库的类型安全。
  (2)绝大多数情况下，Web 应用的开发人员不需要考虑与类加载器相关的细节。下面给出几条简单的原则：
 　　<1>每个 Web 应用自己的 Java 类文件和使用的库的 jar 包，分别放在 WEB-INF/classes和 WEB-INF/lib目录下面。
 　　<2>多个应用共享的 Java 类文件和 jar 包，分别放在 Web 容器指定的由所有 Web 应用共享的目录下面。
 　　<3>当出现找不到类的错误时，检查当前类的类加载器和当前线程的上下文类加载器是否正确。
5.类加载器与OSGI
  (1)什么是OSGI
     OSGi是 Java 上的动态模块系统。它为开发人员提供了(面向服务和基于组件)的运行环境，并提供标准的方式用来(管理软件的生命周期)。OSGi 已经被实现和部署在很多产品上，在开源社区也
     得到了广泛的支持。Eclipse就是基于OSGi 技术来构建的。
  (2)OSGi 中的每个模块（bundle）都包含 Java 包和类。模块可以声明它所依赖的需要导入（import）的其它模块的 Java 包和类（通过 Import-Package），也可以声明导出（export）自己
     的包和类，供其它模块使用（通过 Export-Package）.也就是说需要能够隐藏和共享一个模块中的某些 Java 包和类
  (3)OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）
     来完成。当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。
     模块也可以显式的声明某些 Java 包和类，必须由父类加载器来加载。只需要设置系统属性 org.osgi.framework.bootdelegation的值即可。
  (4)示例:
     假设有两个模块 bundleA 和 bundleB，它们都有自己对应的类加载器 classLoaderA 和 classLoaderB。在 bundleA 中包含类 com.bundleA.Sample，并且该类被声明为导出的，也就是说
     可以被其它模块所使用的。bundleB 声明了导入 bundleA 提供的类 com.bundleA.Sample，并包含一个类 com.bundleB.NewSample继承自 com.bundleA.Sample。在 bundleB 启动的时候，
     其类加载器 classLoaderB 需要加载类 com.bundleB.NewSample，进而需要加载类 com.bundleA.Sample。由于 bundleB 声明了类 com.bundleA.Sample是导入的，classLoaderB 把加
     载类 com.bundleA.Sample的工作代理给导出该类的 bundleA 的类加载器 classLoaderA。classLoaderA 在其模块内部查找类 com.bundleA.Sample并定义它，所得到的类 com.bundleA.Sample
     实例就可以被所有声明导入了此类的模块使用。对于以 java开头的类，都是由父类加载器来加载的。如果声明了系统属性 org.osgi.framework.bootdelegation=com.example.core.*，那么对于包
     com.example.core中的类，都是由父类加载器来完成的。
  (5)OSGi 模块的这种类加载器结构，使得一个类的不同版本可以共存在 Java 虚拟机中，带来了很大的灵活性。不过它的这种不同，也会给开发人员带来一些麻烦，尤其当模块需要使用第三方提供的库的时候。下面提供几条比较好的建议：
 　　 <1>如果一个类库只有一个模块使用，把该类库的 jar 包放在模块中，在 Bundle-ClassPath中指明即可。
 　　 <2>如果一个类库被多个模块共用，可以为这个类库单独的创建一个模块，把其它模块需要用到的 Java 包声明为导出的。其它模块声明导入这些类。
 　　 <3>如果类库提供了 SPI 接口，并且利用线程上下文类加载器来加载 SPI 实现的 Java 类，有可能会找不到 Java 类。如果出现了 NoClassDefFoundError异常，首先检查当前线程的上下文类加载器是否正确。通过
         Thread.currentThread().getContextClassLoader()就可以得到该类加载器。该类加载器应该是该模块对应的类加载器。如果不是的话，可以首先通过 class.getClassLoader()来得到模块对应的类加载器，再通过
         Thread.currentThread().setContextClassLoader()来设置当前线程的上下文类加载器。
6.jboss



