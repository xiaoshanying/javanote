Java对象模型 oop-klass、对象头
参考链接:https://blog.csdn.net/qq_38071004/article/details/80859961
1.oop
  (1)java创建的对象存储在堆中,这个对象具体分为3个部分
     <1>_mark:存储对象的一些标记(是否加锁,加锁次数)
     <2>meta_data:存储指向元数据的指针
     <3>field:对象本身携带的数据
     <4>_mark + meta_data = 对象头
  (2)锁标记
     <1>通过同步方法加锁的对象会在对象上添加ACC_SYNCHRONIZED标记。每个线程获得对象的锁时,会在锁计数器上加1,
        同一线程可以对对象重复加锁。释放锁时，锁计数器减1，当锁计数器为0时,其它线程可以执行这个同步方法。
     <2>通过同步代码块给对象加锁，在同步代码块中。进入同步代码块前会执行monitorenter指令,使锁计数器加1,出代码块
        后执行monitorexit指令，使锁计数器减1，计数器为0时，其它线程可以进入这个代码块。

2.klass
  (1)klass存在于方法区，代表着类的基本信息。当类A加载时JVM会在方法区创建一个对应的AKlass对象,当a对象被创建时，在
     堆中创建aOopInstance对象,oop的对象头中的meta_data存储着指向AKlass的指针。
  (2)一个java类对应有一个class对象,创建这个对象同样会在堆中创建一个被称为 类名KlassOop对象,他的meta_data的指针
     会指向方法区中的KlassKlass对象.

3.词语解释 https://blog.csdn.net/w372426096/article/details/81167669
  (1)OOP:普通对象指针,标识一个实例信息
  (2)Klass:描述对象实例的具体类型,包含了元数据和方法信息
  (3)oop-klass创建目的:不想让每个对象中都含有一个vtable(虚函数表)

4.内存存储
  对象的实例保存在堆上,对象的元数据保存在方法区,对象的引用保存在栈上。
5.总结
  在Java中，JVM中的对象模型包含两部分：Oop和Klass，在类被加载的时候，JVM会给类创建一个instanceKlass，其中包含了类信息、
  常量、静态变量、即时编译器编译后的代码等，存储在方法区，用来在JVM层表示该Java类。而使用new一个对象后，JVM就会创建一个instanceOopDesc对象，
  该对象包含对象头和实例数据，对象头中保存的是锁的状态标志等信息，元数据则实际上是一个指针，指向instanceKlass。
6.对象头(mark word)
  (1)存储对象自身的运行时数据.(hashcode,gc分代,线程持有的锁,偏向线程id,偏向时间戳)32或者64
  (2)对象的指针类型
  (3)对象自身的示例数据
  (4)填充