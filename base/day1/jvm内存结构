堆,栈,方法区,直接内存,堆和栈的区别
1.基本数据类型,局部变量放在栈内存中,用完就消失。new创建的实例化对象和数组,是放在堆内存里，用完之后
  靠垃圾回收机制不定期自动消除。
2.栈的特点
  (1)函数中定义的基本类型变量,对象的引用变量都在函数的栈内存中分配。
  (2)栈内存的特点，函数执行完毕，变量会立即释放，解决内存空间。
  (3)栈内存中的数据，没有初始化默认值，需要手动设置。
3.堆的特点
  (1)堆内存用来存放new创建的对象和数组。
  (2)堆内存中所有的实体都有内存地址值。
  (3)堆内存中的实体是用来封装数据的,这些数据都有默认初始化值。
  (4)堆内存中的实体不在被指向时,JVM启动垃圾收集机制，自动清除。
4.局部变量
  定义在函数中的变量,定义在函数中的参数上的变量，定义在for循环内部的变量。
5.方法区
  (1)各个线程共享的内存区域。
  (2)存储已经被虚拟机加载的类信息，常量，静态常量，即时编译器编译后的代码
  (3)方法区无法满足内存分配需求时，将跑出outOfMemoryError
  (4)分区->持久代 存储类定义,结构,字段，方法以及常量在内的类相关数据。可以通过
     -XX:PermSize以及-XX:MaxPermSize来进行调节。空间用完报java.lang.OutOfMemoryError: PermGenspace的异常。
     java8开始,取代了持久代，称为元空间。
  (5)存储的数据（每个class的信息）
     <1>类加载器的引用(classLoader)
     <2>运行时常量池（常量，字段引用，方法引用，属性）
     <3>字段数据（每个方法的名字，类型(类的全路径名,类型或接口)，修饰符，属性
     <4>方法数据（方法的名字，返回类型，参数类型(有序),修饰符，属性）
     <5>方法代码（方法的字节码，操作数栈大小，局部变量大小，局部变量表，异常表，每个异常处理的开始位置，结束位置，代码
        处理在pc中的偏移地址，被捕获的异常类的常量池索引）
  (6)特点
     <1>方法区线程安全。
     <2>大小不固定,jvm根据需要动态调整。不一定连续。
     <3>可以被垃圾收集,当某个类不在被使用时,jvm会卸载这个类，进行垃圾收集
6.堆和栈的区别
  (1)物理地址
     堆的物理地址分配对 对象来说是不连续的，性能慢一些。栈物理地址分配连续，性能快一些。
  (2)内存
     堆内存不连续，分配的内存是在运行期确认，大小不固定。栈连续，分配的大小在编译器就确认，大小固定。
  (3)存放的内容
     堆存放的是对象的实例和数组。该区更关注的是数据的存储。
     栈存放的是局部变量,操作数栈，结果。更关注方法的执行。
     静态变量在方法区
     静态的对象在堆
  (4)程序的可见度
     堆对整个应用程序共享，可见
     栈只对于线程可见，线程私有。生命周期和线程相同。
  (5)内存设置
     栈内存设置 -Xss
     堆内存设置 -Xms初始堆大小 -Xmx堆的最大值
7.查看堆的默认值
  控制台输入 java -XX:+PrintFlagsFinal -version | grep HeapSize
8.查看栈的默认值
  java -XX:+PrintFlagsFinal -version | grep ThreadStackSize
推荐阅读地址:https://www.cnblogs.com/ibelieve618/p/6380328.html
