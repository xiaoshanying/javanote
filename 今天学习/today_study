1.boot引入微信配置
  启动类加入
   @Bean
    public ApiConfig newApiConfig() {
        return new ApiConfig(appId,appSecret, true);
    }

    @Bean
    public JsAPI newJsAPI() {
        return new JsAPI(newApiConfig());
    }

2.mybatis的#和$的区别

  #将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号。如：order by #user_id#，如果传入的值是111,那么解析成sql时的值为order by "111", 如果传入的值是id，则解析成的sql为order by "id".
　　
  $将传入的数据直接显示生成在sql中。如：order by $user_id$，如果传入的值是111,那么解析成sql时的值为order     by user_id,  如果传入的值是id，则解析成的sql为order by id.
　　
  #方式能够很大程度防止sql注入。
　　
  $方式无法防止Sql注入。

  $方式一般用于传入数据库对象，例如传入表名.
　　
  一般能用#的就别用$.

  MyBatis排序时使用order by 动态参数时需要注意，用$而不是#

3.在用provider拼接sql的时候

  注意可以自己造查询条件,在类中做单元测试，看拼接出来的sql是否正确

5.ConcurrentSkipListMap
  可以解决的问题:多线程并发存取<Key, Value>数据并且希望保证数据有序时
6.在gitlab上创建一个公共项目的本地项目
  进入项目—>点击fork即可
7.公共项目打包本地用
  mvn clean install
  mvn deploy 发布到仓库
8.mysql查询索引
  不加索引会导致查询时扫全表
  加索引会把扫描范围缩小到索引所在的行
  where a = 1 and b = 2 and c = 3
  假如a加索引
  则and b = 2 and c = 3会在where a = 1查询的结果集中查询

9.ThreadPoolExcutor

public ThreadPoolExecutor(int corePoolSize,
                              int maximumPoolSize,
                              long keepAliveTime,
                              TimeUnit unit,
                              BlockingQueue<Runnable> workQueue,
                              ThreadFactory threadFactory,
                              RejectedExecutionHandler handler) {
        if (corePoolSize < 0 ||
            maximumPoolSize <= 0 ||
            maximumPoolSize < corePoolSize ||
            keepAliveTime < 0)
            throw new IllegalArgumentException();
        if (workQueue == null || threadFactory == null || handler == null)
            throw new NullPointerException();
        this.corePoolSize = corePoolSize;
        this.maximumPoolSize = maximumPoolSize;
        this.workQueue = workQueue;
        this.keepAliveTime = unit.toNanos(keepAliveTime);
        this.threadFactory = threadFactory;
        this.handler = handler;
    }

    RejectedExecutionHandler: 当提交任务数超过maxmumPoolSize+workQueue之和时，任务会交给RejectedExecutionHandler来处理

    (1).当线程池小于corePoolSize时，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。
    (2).当线程池达到corePoolSize时，新提交任务将被放入workQueue中，等待线程池中任务调度执行
    (3).当workQueue已满，且maximumPoolSize>corePoolSize时，新提交任务会创建新线程执行任务
    (4).当提交任务数超过maximumPoolSize时，新提交任务由RejectedExecutionHandler处理
    (5).当线程池中超过corePoolSize线程，空闲时间达到keepAliveTime时，关闭空闲线程
    (6).当设置allowCoreThreadTimeOut(true)时，线程池中corePoolSize线程空闲时间达到keepAliveTime也将关闭

10. Excutors提供的线程池配置方案

    (1)、构造一个固定线程数目的线程池，配置的corePoolSize与maximumPoolSize大小相同，同时使用了一个无界LinkedBlockingQueue存放阻塞任务，因此多余的任务将存在再阻塞队列，不会由RejectedExecutionHandler处理
    Java代码
    public static ExecutorService newFixedThreadPool(int nThreads) {
            return new ThreadPoolExecutor(nThreads, nThreads,
                                          0L, TimeUnit.MILLISECONDS,
                                          new LinkedBlockingQueue<Runnable>());
        }

    (2)、构造一个缓冲功能的线程池，配置corePoolSize=0，maximumPoolSize=Integer.MAX_VALUE，keepAliveTime=60s,以及一个无容量的阻塞队列 SynchronousQueue，因此任务提交之后，将会创建新的线程执行；线程空闲超过60s将会销毁
    Java代码
    public static ExecutorService newCachedThreadPool() {
            return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
                                          60L, TimeUnit.SECONDS,
                                          new SynchronousQueue<Runnable>());
        }

     (3)、构造一个只支持一个线程的线程池，配置corePoolSize=maximumPoolSize=1，无界阻塞队列LinkedBlockingQueue；保证任务由一个线程串行执行
    Java代码
    public static ExecutorService newSingleThreadExecutor() {
            return new FinalizableDelegatedExecutorService
                (new ThreadPoolExecutor(1, 1,
                                        0L, TimeUnit.MILLISECONDS,
                                        new LinkedBlockingQueue<Runnable>()));
        }

    (4)、构造有定时功能的线程池，配置corePoolSize，无界延迟阻塞队列DelayedWorkQueue；有意思的是：maximumPoolSize=Integer.MAX_VALUE，由于DelayedWorkQueue是无界队列，所以这个值是没有意义的
    Java代码
    public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
            return new ScheduledThreadPoolExecutor(corePoolSize);
        }

    public static ScheduledExecutorService newScheduledThreadPool(
                int corePoolSize, ThreadFactory threadFactory) {
            return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory);
        }

    public ScheduledThreadPoolExecutor(int corePoolSize,
                                 ThreadFactory threadFactory) {
            super(corePoolSize, Integer.MAX_VALUE, 0, TimeUnit.NANOSECONDS,
                  new DelayedWorkQueue(), threadFactory);
        }

    被拒绝的任务
    当 Executor 已经关闭，并且 Executor 将有限边界用于最大线程和工作队列容量，且已经饱和时，在方法 execute(java.lang.Runnable) 中提交的新任务将被拒绝。在以上两种情况下，execute 方法都将调用其RejectedExecutionHandler 的RejectedExecutionHandler.rejectedExecution(java.lang.Runnable, java.util.concurrent.ThreadPoolExecutor) 方法。下面提供了四种预定义的处理程序策略：
    在默认的 ThreadPoolExecutor.AbortPolicy 中，处理程序遭到拒绝将抛出运行时RejectedExecutionException。
    在 ThreadPoolExecutor.CallerRunsPolicy 中，线程调用运行该任务的execute 本身。此策略提供简单的反馈控制机制，能够减缓新任务的提交速度。
    在 ThreadPoolExecutor.DiscardPolicy 中，不能执行的任务将被删除。
    在 ThreadPoolExecutor.DiscardOldestPolicy 中，如果执行程序尚未关闭，则位于工作队列头部的任务将被删除，然后重试执行程序（如果再次失败，则重复此过程）。


  11.spring注入

     spring注入默认是单例,所以有成员变量的地方,且成员变量可以改变的情况下，要注意多线程情况下成员变量的修改

  12.微信相关操作的依赖

      <dependency>
            <groupId>com.github.sd4324530</groupId>
            <artifactId>fastweixin</artifactId>
            <version>1.3.14</version>
        </dependency>

    应用:
     在配置文件中配置相关的wechat appid 和 secret
     fastweixin提供了一整套关于微信的操作
     @Bean
    public ApiConfig newApiConfig() {
        return new ApiConfig(appId, appSecret, true);
    }

    @Bean
    public JsAPI newJsAPI() {
        return new JsAPI(newApiConfig());
    }

     @Bean
    public QrcodeAPI newQrCodeAPI() {
        return new QrcodeAPI(newApiConfig());
    }
  13获取ip地址
    public static String getIPAddr(ServletRequest servletRequest) {
        if (servletRequest instanceof HttpServletRequest) {
            HttpServletRequest request = (HttpServletRequest) servletRequest;
            String ip = request.getHeader("X-Real-IP");
            if (StringUtils.isBlank(ip) || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getHeader("x-forwarded-for");
            }
            if (StringUtils.isBlank(ip) || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getHeader("Proxy-Client-IP");
            }
            if (StringUtils.isBlank(ip) || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getHeader("WL-Proxy-Client-IP");
            }
            if (StringUtils.isBlank(ip) || "unknown".equalsIgnoreCase(ip)) {
                ip = request.getRemoteAddr();
            }
            return ip;
        }
        return servletRequest.getRemoteAddr();
    }
  14确保消息推送效率的方法:
    消息异步推送,通过定时任务.
    将要推送的消息放入数据库中,状态为0未推送,1已推送,2推送失败.
    根据数据状态判断是否已经推送,未推送的则下次查询时还会重新推送
  15 分布式任务调度平台
     <!-- http://repo1.maven.org/maven2/com/xuxueli/xxl-job-core/ -->
      <dependency>
          <groupId>com.xuxueli</groupId>
          <artifactId>xxl-job-core</artifactId>
          <version>1.8.1</version>
      </dependency>

 16 Spring RestTemplate的用法

    在调用类中注入RestTemplate
    private RestTemplate restTemplate

    //get请求接口
    restTemplate.getForObject("请求的url",请求参数对象,返回结果的数据类型.class)

   //post请求接口
   restTemplate.postForObject("请求的接口的url",请求参数对象,返回结果的数据类型的.class)

   可以用于一台机器上的应用去调另一台机器上的接口,获取返回的信息

 17 有关开发环境的配置
    Git 操作:
    创建一个分支去关联远端分支
    git remote add fenzhi名  线上git地址
    以后拉取线上代码   git fetch fenzhi名

    mac软件包管理安装
    homebrew
    安装软件命令 brew install 软件名

    idea改变terminal步骤
    Idea —> preference —>搜索terminal—>Shell path去选择相应的即可

    安装zsh
    安装iterm2  终端显示工具

    Shop的配置以后存到shop_config表中

  18 七牛缩略图:
  1.没有必要自己上传缩略图，那多麻烦。。。
  2.那怎么获取到缩略图呢？

  我们这边直接看使用的实战：

  原图链接:http://7xoq3e.com1.z0.glb.clouddn.com/o_1ack0aah919v017hj6gpe241j35m.jpg
  我们想等比例压缩成300*300的缩略图，怎么办？
  直接在图片链接的后面加入?imageView2/1/w/300/h/300

  也就是最终的缩略图链接是：http://7xoq3e.com1.z0.glb.clouddn.com/o_1ack0aah919v017hj6gpe241j35m.jpg?imageView2/1/w/300/h/300


  19 scp应用

    在本地执行以下命令:从远程服务器cp文件到本地
    scp 远程用户(root)@服务器ip:文件路径 .(点代表当前目录)

    从本地cp文件到远程服务器
    scp file 远程用户(root)@服务器ip:文件路径

  20查看日志

    more查看比较慢,用tail
    tail -n 行数 日志文件名称 | grep -C 10 "异常信息"

  21如理大量请求:
    在web应用中,同一时间有大量的客户端请求同时发送到服务器,例如抢购、秒杀等。这个时候如何避免将大量的请求同时发送到业务系统。

    第一种方法:在容器中配置最大请求数,如果大于改请求数,则客户端阻塞。该方法有效的阻止了大量的请求同时访问业务系统,但对用于不友好。

    第二种方法:使用过滤器,保证一定数量的请求能够正常访问系统,多余的请求先跳转到排队页面,由排队页面定时发起请求。过滤器实现如下:

    <pre name="code" class="java">public class ServiceFilter implements Filter { private static final int MAX_COUNT = 20; private int filterCount = 0; public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { System.out.println("before"+filterCount); if(filterCount > MAX_COUNT) { //请求个数太多,跳转到排队页面 request.getRequestDispatcher("index.jsp").forward(request, response); } else { //请求个数加1 filterCount ++; chain.doFilter(request, response); //访问结束,请求个数减1 filterCount --; } }
    }

22.idea 启用gradle项目,用groovy时，会报错,不支持注解
   解决:preference -> Annotation Processors -> 勾选enable annotation pro...

23.
   class1.isAssignableFrom(class2) 判定此 Class 对象所表示的类或接口与指定的 Class 参数所表示的类或接口是否相同，或是否是其超类或超接口。如果是则返回 true；否则返回 false。如果该 Class 表示一个基本类型，且指定的 Class 参数正是该 Class 对象，则该方法返回 true；否则返回 false。

   class2是不是class1的子类或者子接口

   Object是所有类的父类
24.mybatis分页
   (1)基于内存的分页,(查出所有记录,在按偏移量和limit取结果)数据量大的时候,这种分页基本上是没有用的。
     可以通过拦截StatementHandler重写sql语句,实现数据库的物理分页.
   (2)MetaObject是Mybatis提供的一个的工具类，通过它包装一个对象后可以获取或设置该对象的原本不可访问的属性（比如那些私有属性）。它有个三个重要方法经常用到
       MetaObject forObject(Object object,ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory) 包装对象

       Object getValue(String name) 获取属性的值

       void setValue(String name, Object value) 设置属性的值

25.将一个项目上传至github
    echo "# hornet" >> README.md
    git init
    git add README.md
    git commit -m "first commit"
    git remote add origin git@github.com:user/project.git
    git push -u origin master

    首次提交,先拉代码 git pull
    然后 git push 将代码提交到github

26.请求,后台没有打日志
   看是不是https证书过期的原因

27.gradle打包的项目,一个项目依赖公共的包
   当公共包更新时,依赖这个包的项目没有拿到最新发布的公共包
   解决:在gradle配置中配置
   dependencyManagement {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}
28.gradle配置；
   依赖仓库的配置
   repositories {
    maven { url "r1"}
    maven { url "r2" }
}

添加应用的插件
apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

属性配置
ext {
    springCloudVersion = 'Finchley.M9'
}

依赖管理
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
    }
}

构建脚本
buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        maven { url "要发布的仓库"}
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

添加项目的依赖
dependencies {

    compileOnly('org.projectlombok:lombok')

    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile('org.springframework.boot:spring-boot-starter-web')

    compile("org.springframework.boot:spring-boot-starter-data-redis")

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1')
    runtime('mysql:mysql-connector-java')

    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    compile('net.logstash.logback:logstash-logback-encoder:4.11')
    compile('commons-io:commons-io:2.6')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4')
}

29.公共的依赖的gradle配置

  apply plugin: 'maven-publish'

  dependencies {
      compileOnly('org.projectlombok:lombok:1.16.18')
      compile('org.apache.httpcomponents:httpclient:4.5.2')
      compile('com.alibaba:fastjson:1.2.47')
  }

  publishing {
    publications {
        maven(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
        }
    }
    repositories {
        //指定包发布到那个仓库
        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url = 'http://nexus.xxx.net/nexus/content/repositories/snapshots/'
            } else {
                url = 'http://nexus.xxx.net/nexus/content/repositories/snapshots/'
            }
            //认证
            credentials {
                username 'username'
                password 'password'
            }
        }
    }
}

30.项目基础配置
   apply plugin: 'idea'

allprojects {
    group = 'com.xxx.milestone'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        maven { url "指定依赖的仓库" }
    }
}

setting.gradle配置
include '项目1'
include '..'
include '..'
include '..'
include '..'

rootProject.name = '跟项目名称'
rootProject.children.each {
    it.buildFileName = it.name + ".gradle"
}

31.explain详解
   EXPLAIN列的解释：

   table：显示这一行的数据是关于哪张表的

   type：这是重要的列，显示连接使用了何种类型。从最好到最差的连接类型为const、eq_reg、ref、range、index和ALL

         type显示的是访问类型，是较为重要的一个指标，结果值从好到坏依次是：system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL
         一般来说，得保证查询至少达到range级别，最好能达到ref。
         id in (6,10,20,100,200) range
         id = 6 const

    possible_keys：显示可能应用在这张表中的索引。如果为空，没有可能的索引。可以为相关的域从WHERE语句中选择一个合适的语句

    key： 实际使用的索引。如果为NULL，则没有使用索引。很少的情况下，MYSQL会选择优化不足的索引。这种情况下，可以在SELECT语句中使用USE INDEX（indexname）来强制使用一个索引或者用IGNORE INDEX（indexname）来强制MYSQL忽略索引

    ref：显示索引的哪一列被使用了，如果可能的话，是一个常数

    key_len：使用的索引的长度。在不损失精确性的情况下，长度越短越好

    rows：MYSQL认为必须检查的用来返回请求数据的行数

    Extra：关于MYSQL如何解析查询的额外信息。将在表4.3中讨论，但这里可以看到的坏的例子是Using temporary和Using filesort，意思MYSQL根本不能使用索引，结果是检索会很慢

    extra列返回的描述的意义

     Distinct:一旦MYSQL找到了与行相联合匹配的行，就不再搜索了

     Not exists: MYSQL优化了LEFT JOIN，一旦它找到了匹配LEFT JOIN标准的行，就不再搜索了

     Range checked for each Record（index map:#）:没有找到理想的索引，因此对于从前面表中来的每一个行组合，MYSQL检查使用哪个索引，并用它来从表中返回行。这是使用索引的最慢的连接之一

     Using filesort: 看到这个的时候，查询就需要优化了。MYSQL需要进行额外的步骤来发现如何对返回的行排序。它根据连接类型以及存储排序键值和匹配条件的全部行的行指针来排序全部行

     Using index: 列数据是从仅仅使用了索引中的信息而没有读取实际的行动的表返回的，这发生在对表的全部的请求列都是同一个索引的部分的时候

     Using temporary 看到这个的时候，查询需要优化了。这里，MYSQL需要创建一个临时表来存储结果，这通常发生在对不同的列集进行ORDER BY上，而不是GROUP BY上

     Where used 使用了WHERE从句来限制哪些行将与下一张表匹配或者是返回给用户。如果不想返回表中的全部行，并且连接类型ALL或index，这就会发生，或者是查询有问题不同连接类型的解释（按照效率高低的顺序排序）

     system 表只有一行：system表。这是const连接类型的特殊情况

     const:表中的一个记录的最大值能够匹配这个查询（索引可以是主键或惟一索引）。因为只有一行，这个值实际就是常数，因为MYSQL先读这个值然后把它当做常数来对待

     eq_ref:在连接中，MYSQL在查询时，从前面的表中，对每一个记录的联合都从表中读取一个记录，它在查询使用了索引为主键或惟一键的全部时使用

     ref:这个连接类型只有在查询使用了不是惟一或主键的键或者是这些类型的部分（比如，利用最左边前缀）时发生。对于之前的表的每一个行联合，全部记录都将从表中读出。这个类型严重依赖于根据索引匹配的记录多少—越少越好

     range:这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西时发生的情况

     index: 这个连接类型对前面的表中的每一个记录联合进行完全扫描（比ALL更好，因为索引一般小于表数据）

     ALL:这个连接类型对于前面的每一个记录联合进行完全扫描，这一般比较糟糕，应该尽量避免

     连接的查询尽量用between ,in 的效率低于between 大概2-3倍

32.spring cloud 杂记:
     断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
33.spring cloud 网关杂记:
    配置好之后,网关转发到服务时报错
     Caused by: java.lang.RuntimeException: java.net.UnknownHostException: xxx: 未知的名称或服务
    at rx.exceptions.Exceptions.propagate(Exceptions.java:58) ~[rxjava-1.2.0.jar!/:1.2.0]
    at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:464) ~[rxjava-1.2.0.jar!/:1.2.0]
    at rx.observables.BlockingObservable.single(BlockingObservable.java:341) ~[rxjava-1.2.0.jar!/:1.2.0]
    at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112) ~[ribbon-loadbalancer-2.2.5.jar!/:2.2.5]
    ... 135 common frames omitted
  Caused by: java.net.UnknownHostException: xxx: 未知的名称或服务
    at java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method) ~[na:1.8.0_151]
    at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928) ~[na:1.8.0_151]
    at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323) ~[na:1.8.0_151]
    at java.net.InetAddress.getAllByName0(InetAddress.java:1276) ~[na:1.8.0_151]
    at java.net.InetAddress.getAllByName(InetAddress.java:1192) ~[na:1.8.0_151]
    at java.net.InetAddress.getAllByName(InetAddress.java:1126) ~[na:1.8.0_151]
    at org.apache.http.impl.conn.SystemDefaultDnsResolver.resolve(SystemDefaultDnsResolver.java:45) ~[httpclient-4.5.5.jar!/:4.5.5]
    at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:112) ~[httpclient-4.5.5.jar!/:4.5.5]
    at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:373) ~[httpclient-4.5.5.jar!/:4.5.5]
    at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:381) ~[httpclient-4.5.5.jar!/:4.5.5]
  --
   解决方法:
      在网关上配置相应的host

34.Java虚拟机启动参数调整
   (1).再启动时,调整最大堆的大小。
        java -Xmx2048m app
   (2).调整永生带最大大小为1G
       java -XX:MaxPermSize=1024m app
    普通对象一般占用的都是Heap空间
    ,如果是常量或是String.intern()出来的东西,则占用的是永生代

35.jpa 注解查询里边用in
    @Query(value = "select * from trade$seek_purchase_offer where sp_id in (:spIds) and of_enuu = :enUu", nativeQuery = true)
    List<SeekPurchaseOffer> getSeekPurchaseOfferList(@Param("spIds") List<Long> spIds, @Param("enUu") Long enUu);
    jpa @Query中使用in,需要注意参数一定要是List<>，不然无法查询出数据。


36.利用mkdir一次性创建多个目录
   mkdir 前缀{1..n}
   可以创建 前缀1 - 前缀n n个文件夹

37.springboot @EnableAsync注解
   有时，我们需要在一个方法中完成方法内的逻辑后需要通知其他接口，但是不需要等其他接口返回结果就直接在当前方法中返回（比如用户支付完订单后需要及时给用户返回支付结果，同时需要通知商户：用户已完成支付），这时就需要异步调用（不用等待通知完商户才给用户返回支付结果）。

   在启动类上添加@EnableAsync注解，表示项目支持异步方法调用；

   在需要异步调用的方法上添加@Async注解，表示该方法为异步方法，即该方法和调用者不在一个线程中进行。

38.@PostContruct
   @PostContruct是spring框架的注解，在方法上加该注解会在项目启动的时候执行该方法，也可以理解为在spring容器初始化的时候执行该方法。
    只有一个方法可以使用此注释进行注解；
    被注解方法不得有任何参数；
    被注解方法返回值为void；
    被注解方法不得抛出已检查异常；
    被注解方法需是非静态方法；
    此方法只会被执行一次；
  在项目中@PostConstruct主要应用场景是在初始化Servlet时加载一些缓存数据等。
  使用此注解时会影响到服务的启动时间


39.spring中的监听器
   使用场景:
     当做完某一件事以后，需要广播一些消息或者通知,告诉其他的模块进行一些事件的处理,一般来说,可以
     一个一个发送请求去通知,但是有一种更好的方式,就是事件的监听。

     角色:
      1、事件（event）可以封装和传递监听器中要处理的参数，如对象或字符串，并作为监听器中监听的目标。
      2、监听器（listener）具体根据事件发生的业务处理模块，这里可以接收处理事件中封装的对象或字符串。
      3、事件发布者（publisher）事件发生的触发者。

40.postman 测试RequestBody请求,需要用row,格式选application/json
   例:
     {
  "key":"value"
}

41.小程序访问,需要用域名和https
   一个小程序可以添加多个域名

42.查看进程内存的信息
通过 pmap 命令，可以获取用户进程逻辑地址空间中映射的内存信息
top 查看某个进程的pid
pmap -x pid
每个进程的内存使用情况可以通过查看 /proc/进程ID/status 来查看
cat /proc/pid/status
可以查看堆栈,线程...

43.xargs,将前一个命令输出的结果作为参数传递给另一个命令
  例:找出特定目录下的以.conf结尾的文件并分类
  find dir -name *.conf -type f -print | xargs file
  例:将找出的jar文件打包
  find dir -name *.jar -type f -print | xargs tar cjf test.tar.gz

44.命令或者脚本的后台运行
  例:导出数据库,并且将命令的操作输出到文件,后台运行
  nohup mysqldump -uroot -p密码 -all-databases > ./alldatabase.sql &
  不想明文的话,后面不加&
   命令后台执行的结果会在命令执行的当前目录下留下一个nohup.out文件。通过看这个文件来查看有无报错

45.找出当前系统内存使用量较高的进程
   4代表第四列,内存的耗用百分比.最后一列是相应的进程
   ps -aux | sort -rnk 4 | head -20

46.找出当前系统cpu使用量较高的进程
  第三列是cpu的耗用百分比
   ps -aux | sort -rnk 3 | head -n

47.同时查看多个日志或数据文件
   工具:multitail
   安装:
    wget ftp://ftp.is.co.za/mirror/ftp.rpmforge.net/redhat/el6/en/x86_64/dag/RPMS/multitail-5.2.9-1.el6.rf.x86_64.rpm
    yum -y localinstall multitail-5.2.9-1.el6.rf.x86_64.rpm

    例:我们即想查看secure日志指定过滤关键字输出,又想查看实时的网络ping情况
    multitail -e "关键字" /var/log/secure -1 "ping baidu.com"

48.持续将ping结果记录到日志
   ping 地址 | awk '{ print $0”    “ strftime(“%Y-%m-%d %H:%M:%S”,systime()) } ' >> /tmp/文件.log &


49.查看tcp链接状态
   netstat -nat | awk '{print $6}'|sort|uniq -c|sort -rn


50.查找80端口请求数最高的前20个ip
   netstat -anlp|grep 80|grep tcp|awk '{print $5}'|awk -F: '{print $1}'|sort|uniq -c|sort -nr|head -n20


51.maven打包时跳过测试
   mvn clean install -Dmaven.test.skip=true


52.bytebuffer解析
   缓冲区:在内存中预留指定大小的存储空间来对(io)数据做临时存储
   缓冲区优点:减少实际的物理读写次数
            缓冲区在创建时就被分配内存,这块内存一直被重用,可以减少动态分配和回收内存的次数

  实际过程中,先将文件读入内存,在从内存写出到别的地方

  所有缓冲区都有4个属性：capacity、limit、position、mark，并遵循：mark <= position <= limit <= capacity，下表格是对着4个属性的解释：

  属性 描述
  Capacity  容量，即可以容纳的最大数据量；在缓冲区创建时被设定并且不能改变
  Limit 表示缓冲区的当前终点，不能对缓冲区超过极限的位置进行读写操作。且极限是可以修改的
  Position  位置，下一个要被读或写的元素的索引，每次读写缓冲区数据时都会改变改值，为下次读写作准备
  Mark  标记，调用mark()来设置mark=position，再调用reset()可以让position恢复到标记的位置

  ByteBuffer等也是抽象类，所以也不能被实例化。
  allocate(int capacity)  从堆空间中分配一个容量大小为capacity的byte数组作为缓冲区的byte数据存储器

  allocateDirect(int capacity)  是不使用JVM堆栈而是通过操作系统来创建内存块用作缓冲区，它与当前操作系统能够更好的耦合，因此能进一步提高I/O操作速度。但是分配直接缓冲区的系统开销很大，因此只有在缓冲区较大并长期存在，或者需要经常重用时，才使用这种缓冲区

  wrap(byte[] array)  这个缓冲区的数据会存放在byte数组中，bytes数组或buff缓冲区任何一方中数据的改动都会影响另一方。其实ByteBuffer底层本来就有一个bytes数组负责来保存buffer缓冲区中的数据，通过allocate方法系统会帮你构造一个byte数组

    wrap(byte[] array,
   int offset, int length)
  在上一个方法的基础上可以指定偏移量和长度，这个offset也就是包装后byteBuffer的position，而length呢就是limit-position的大小，从而我们可以得到limit的位置为length+position(offset)


53.gradle
(1).构建脚本
    构建脚本名字默认是build.gradle
    Groovy语法之java不同点
    1.表达式后面的分号是可选的；
    2.类和构造器的方法默认为public；
    3.方法体中最后一个表达式的值，意味着return语句是可选的；
    4.Groovy会默认为类的filed写好setter和getter方法，并且可以通过点号来获取，实际上底层调用的是getter和setter方法，点号只是一种简写；
    5.使用“==”来比较两个对象时，实际上是调用了equals()方法。

     在Groovy种如果方法签名至少需要一个参数，则方法可以省略括号，比如
     apply plugin:'java'
     apply是project的方法，调用该方法并传入一个Size为1的Map作为参数，key为‘plugin’，value为‘java’

(2)类型
    1.字符串,在字符串中插变量  "${变量名}"
    2.List   def buildtools = ['ant','maven']
      遍历:  buildtools.each(e -> op(e)) op代表操作
      buildtools << 'gradle'  << 符号代表添加,相当于add
    3.Map 底层是LinkedHashMap
      def tools = ['ant':200,'maven':300]
      添加元素
      tools['key'] = value
      遍历
      tools.each(k,v -> ${k}为$v)
(3)构建脚本作用
       一个构建脚本对应一个Project实例，可以被gradle命令执行的为Task接口的实例
       脚本示例：
         apply plugin:'java' //调用Project的apply方法，传入一个size为1的Map作为参数，方法调用省略括号
          version = '1.0' //调用Project的setter方法来为项目设置版本属性
          repositories{
              mavenCentral()   //调用Project的repositories方法，并传递一个闭包参数，该方法会调用闭包委托的mavenCentral()方法。
          }
          dependencies{
              compile 'commons-codec:commons-codec:1.6'  //调用Project的dependencies方法，并传递一个闭包参数，调用闭包委托的compile方法，用一个String作为参数，省略括号
          }


(4)命令行工具
   gradle dependencies 列出项目的依赖
   gradle -b xxx.gradle(指定构建脚本)
54 mybatis注解批量插入
   @Insert("<script>"+
            "insert into table_name (user_id) "
            + "values "
            + "<foreach collection =\"list\" item=\"e\" index= \"index\" separator =\",\"> "
            + "(#{e.userId})"
            + "</foreach>"
            + "</script>")
    void insertAll(List<xxx> list);

55. mybatis注解,in查询
    @Select("select id as i1,name as str1,username as str2,password as str3 from xxx where id in (${_parameter})")
     List<xxx> getXXXInfoByXXXIds(String xxxIds);

56.单参数分页
   /**
     * 获取分店列表
     *
     * @param groupId
     * @param pagingVO
     * @return
     */
    @RequestMapping(value = "/get/sub-shops.json", method = RequestMethod.POST)
    public String subShopList(PagingVO pagingVO, @RequestParam Integer groupId) {
        try {
            Map<String, Object> res = groupShopManageService.groupSubShops(pagingVO, groupId);
            return CheckUtils.apiSuccessData(res);
        } catch (Exception e) {
            log.error("获取分店列表出现异常,异常信息是:", e);
            return CheckUtils.apiErrMsg("获取分店列表异常");
        }
    }

    /**
     * 分店列表
     *
     * @param groupId
     * @return
     */
    public Map<String, Object> groupSubShops(PagingVO pagingVO, Integer groupId) {
        PageHelper.startPage(pagingVO.getPageNum(), pagingVO.getPageSize());
        List<ShopDO> shopDOS = shopDAO.getShopsByGroupId(groupId);
        Map<String, Object> res = pagingVO.getPageInfo((Page<ShopDO>) shopDOS);
        List<SubShopInfoVO> subShopInfoVOS = new ArrayList<>();
        shopDOS.stream().filter(Objects::nonNull).sorted(Comparator.comparing(ShopDO::getStoreType)
                .reversed())
                .forEach(e -> {
                    SubShopInfoVO vo = new SubShopInfoVO();
                    vo.setArea(ConstantUtils.BdShopConstant.convertRegion(e.getAreaType()));
                    vo.setCity(AreaInfoVO.getCacheName(e.getCityId()));
                    vo.setProvince(AreaInfoVO.getCacheName(e.getProvinceId()));
                    vo.setShopId(e.getId());
                    vo.setShopName(e.getName());
                    vo.setStoreType(e.getStoreType() == 1 ? "分店" : "总店");
                    subShopInfoVOS.add(vo);
                });
        res.put("list", subShopInfoVOS);
        return res;
    }

57.Optional值判断时的一些用法
   if(optional.isPresent){
        doSomething(optional.get)
    }
    可以写成 optional.ifPresent(val -> doSomething(val)
    或者
    optional.ifPresent(this::doSomething)

58.Redis工具类

59.tk的in查询
 <select id="getByIds" parameterType="java.util.List" resultType="com.xxx.">
        SELECT id as articleId,title,article_tag as type,index_img as indexImg,article_url as h5Url
        FROM article_info
        where id in
        <foreach item="item" index="index" collection="list" open="(" separator="," close=")">
            #{item}
        </foreach>
        and status = 1
    </select>

60.mybatis疑问
   在引用外部项目时,需要用到外部项目下的mapper对应的xml文件,这些文件放在resource下,引用时可以用以下路径
   classpath*:mybatis/项目/*.xml
   不管是不是在一个项目里边都可以

61.idea 设置go时的问题
   之前在intellij idea下打开go项目，经常出现cannot resolve file等问题。

   解决办法：在~/.bash_profile配置GOPATH，配置为当前project目录，然后重新启动Intellij Idea。

   若仍然显示红色（无法索引），那么点File下invalid cache/restart即可
62.zsh
    vim .zshrc
    vim ~/.zshrc
    source ~/.zshrc
63.go在mac上环境变量的配置
   https://www.jianshu.com/p/4e699ff478a5
   https://blog.csdn.net/chinawangfei/article/details/80231471

64.mysql replace函数
  UPDATE 表名 SET 字段名=REPLACE(字段, '要替换的部分', '替换的值')  where condition

66.先分组,在排序策略
   select * from table where id in (
      select max(需要排序的字段) as mid from table where 字段1 in (字段1的值) group by 字段1
   )

67.向github提交代码
   git push -u origin master

68.查看linux机器内存大小
   free -m
69.故障排查
   jmap [pid]
  jmap -histo:live [pid]
  jmap -histo:live [pid] | head -n 100
  ps aux | grep PID
  ps -mp pid -o THREAD,tid,time
  printf "%x\n" tid
  jstack pid |grep tid -A 30

  ps p 9718 -L -o pcpu,pmem,pid,tid,time,tname,cmd
  jstack -l 9718 > jstack.log


  1、通过ps ux 排查哪些进程cpu占用率高
  2、查出最耗CPU线程 top -Hp pid
  2、通过线程ID转换16进制，printf "%x\n" 21742
  4、追踪线程内部，查看load过高原因。通过命令：jstack 25245 >>/usr/2文件，将线程堆里面的信息全部保存下来
  5、通过转换的16进制就可以去“2文件”里面查找对应的线程
  3、jstack 21711 | grep 54ee
  4、通过线程ID找出日志

70.spring 监控
    https://blog.csdn.net/j903829182/article/details/78462107 spring boot监控。
    java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/指定目录/ -Dcom.sun.management.jmxremote.port=8996 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false

71.jvisualvm

72.记一次线上oom引发的问题,以及解决
   异常信息:
      org.springframework.web.client.ResourceAccessException: I/O error on POST request for "http://xxx/xxx/create": Connection reset; nested exception is java.net.SocketException: Connection reset
      at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:607)
      at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:557)
      at org.springframework.web.client.RestTemplate.postForObject(RestTemplate.java:357)

  报io error线上服务从注册中心断开连接,注册失败

  排查:一个错误的查询语句,导致查出来10几万条返回结果,直接导致oom

  下载pid文件分析,https://blog.csdn.net/wangligang85/article/details/44815191
  分析图片保存在学习文档pdf下面

73.使用 Eclipse Memory Analyzer 进行堆转储文件分析
   https://www.ibm.com/developerworks/cn/opensource/os-cn-ecl-ma/index.html
   Shallow Heap 和 Retained Heap的区别
   https://blog.csdn.net/a740169405/article/details/53610689

   .prof文件生成 java -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/opt/meihao/  -jar  xx.jar

   如果说一个对象已经不被任何程序逻辑所需要但是还存在被根元素引用的情况，我们可以说这里存在内存泄露。

74.分拣分割
   https://www.cnblogs.com/bymo/p/7571320.html
75.mac上查找java_home
   which java
   ls -l /usr/bin/java
   cd /System/Library/Frameworks/JavaVM.framework/Versions/Current/Commands
   ./java_home
76.查看java进程
   jps
77.gradle 项目和maven项目转换
   https://www.cnblogs.com/yjmyzz/p/gradle-to-maven.html
78.elk搭建
   https://www.cnblogs.com/yjmyzz/p/ELK-install-tutorial.html
79.jenkins搭建
   https://www.cnblogs.com/yjmyzz/p/jenkins-tutorial-part-1.html
80.maven,gradle上传项目到repo
   https://www.cnblogs.com/yjmyzz/p/auto-upload-artifact-to-nexus.html
81.oAuth 2.0讲解
   https://www.cnblogs.com/yjmyzz/p/spring-security-oauth2.html
   授权 -> 拿到Code -> code换token ->带上token去访问资源
82.ActiveMQ系列文章
   https://www.cnblogs.com/yjmyzz/p/activemq-sample.html
83.springboot系列
   https://www.cnblogs.com/yjmyzz/p/spring-boot-helloworld.html
84.java发邮件
   https://www.cnblogs.com/yjmyzz/p/send-mail-using-spring-boot.html
85.线上问题排查
   https://www.cnblogs.com/yjmyzz/p/7478266.html

86.springboot项目 resource下的文件读取
   https://blog.csdn.net/wohaqiyi/article/details/80147999
87.springboot结合websocket
   https://my.oschina.net/genghz/blog/1796965
88.java字节序
   字节顺序是指占用内存多余一个字节类型的数据在内存中的存放顺序。有小端,大端两种。
   little endian(小端字节序):低字节数据存放在内存的低地址处,高字节数据存放在内存高地址处。
   big endian(大端字节序):高字节存放在低地址处,低字节放在高地址处。  网络和jvm采用
   机器的字节序
   System.out.println(ByteOrder.nativeOrder());
   public static void main(String[] args) {       int x = 0x01020304;       ByteBuffer bb = ByteBuffer.wrap(new byte[4]);   bb.asIntBuffer().put(x);    String ss_before = Arrays.toString(bb.array());       System.out.println("默认字节序 " +  bb.order().toString() +  ","  +  " 内存数据 " +  ss_before);       bb.order(ByteOrder.LITTLE_ENDIAN);    bb.asIntBuffer().put(x);    String ss_after = Arrays.toString(bb.array());        System.out.println("修改字节序 " + bb.order().toString() +  ","  +  " 内存数据 " +  ss_after); }
89.双向map
   DualHashBidiMap 可以根据key获取value,也能根据value获取key 实现原理 用两个map,一个存储key->value 另一个存储value-key
   key和value均不能重复.
90.git版本回退
   git reflog查看命令历史
   找出提交的commit_id
   git reset --hard commit_id即可
91.springboot上传图片异常问题
   https://www.cnblogs.com/756623607-zhang/p/9721761.html
92.mac开启和关闭ssh
   查看当前的ssh服务是不是开启
   sudo systemsetup -getremotelogin
   如果没有，开启
   sudo systemsetup -getremotelogin on
   如果要关闭
   sudo systemsetup -getremotelogin off